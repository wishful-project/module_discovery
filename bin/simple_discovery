#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
discovery_driver.py: Implementation of discovery driver for WiSHFUL agent

Usage:
   discovery_driver.py [options] [-q | -v]
   discovery_driver.py --config

Options:
   -f                                 foo
   -d, --downlink dladdress           For communication in downlink direction
   -u, --uplink upaddress             For communication in uplink direction
   -p, --port port                    port for communication with server

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import logging
import time
import zmq
import random
import sys
import wishful_upis.msgs.management_pb2 as msgMgmt
from wishful_upis.msgs.msg_helper import get_msg_type

__author__ = "Piotr Gawlowicz, Mikolaj Chwalisz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, chwalisz}@tkn.tu-berlin.de"


def start_discovery(socket, controllerDl, controllerUl):

    log = logging.getLogger('discovery_driver.main')
    log.debug("Start discovery procedure".format())

    working = True

    while True:
        while True:
            try:
                msgContainer = socket.recv_multipart(zmq.NOBLOCK)
            except zmq.ZMQError:
                break

            assert len(msgContainer) == 3
            group = msgContainer[0]
            msgDesc = msgMgmt.MsgDesc()
            msgDesc.ParseFromString(msgContainer[1])

            if msgDesc.msg_type == get_msg_type(msgMgmt.DiscoverySuccessMsg):
                msg = msgMgmt.DiscoverySuccessMsg()
                msg.ParseFromString(msgContainer[2])
                working = False
            elif msgDesc.msg_type == get_msg_type(msgMgmt.DiscoveryRestartMsg):
                msg = msgMgmt.DiscoverySuccessMsg()
                msg.ParseFromString(msgContainer[2])
                working = True
            else:
                log.debug("Module drops unknown message: {0} from agent".format(msgDesc.msg_type))


        if working:
            #wait 3s with discovery message
            time.sleep(3)

            group = "LOCAL"
            msgDesc = msgMgmt.MsgDesc()
            msgDesc.msg_type = get_msg_type(msgMgmt.ControllerDiscoveredMsg)
            msg = msgMgmt.ControllerDiscoveredMsg()
            msg.down_link = controllerDl
            msg.up_link = controllerUl

            msgContainer = [group, msgDesc.SerializeToString(), msg.SerializeToString()]

            socket.send_multipart(msgContainer)

        time.sleep(3)


def main(args):
    log = logging.getLogger('discovery_driver.main')
    log.debug(args)

    port = args['--port']
    controllerDl = args['--downlink']
    controllerUl = args['--uplink']

    controllerDl = controllerDl.replace(" ", "")
    controllerUl = controllerUl.replace(" ", "")

    log.debug("Controller to connect : DL:{0} and UL:{1}".format(controllerDl, controllerUl))

    #Connect to WiSHFUL Agent
    context = zmq.Context()
    socket = context.socket(zmq.PAIR)
    socket.connect("tcp://localhost:%s" % port)

    try:
        start_discovery(socket, controllerDl, controllerUl)
    except KeyboardInterrupt:
        log.debug("discovery_driver exits")


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logging.basicConfig(level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    main(args)
